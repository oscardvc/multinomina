<?php
	include_once('connection.php');
	include_once('trabajador.php');
	include_once('servicio_trabajador.php');
	include_once('tipo.php');
	include_once('base.php');
	include_once('salario_diario.php');
	include_once('trabajador_salario_minimo.php');
	include_once('trabajador_sucursal.php');
	include_once('contrato.php');
	include_once('actividad.php');

//Class Archivo_digital definition

	class Archivo_digital
	{
		//class properties
		//data
		private $Nombre;
		private $tmpNombre;//file temporal name (is not gonna be stored at database)
		private $fp;//file pointer (is not gonna be stored at database)
		private $Tipo;
		private $Tamanio;
		private $Contenido;
		private $Trabajador;
		private $Empresa;
		//database connection
		private $conn;

		//class methods
		public function __construct()
		{

			if(!isset($_SESSION))
				session_start();

			$this->conn = new Connection();
		}

		public function __destruct()
		{
		}

		public function set($name, $value) //sets property named $name with value $value
		{
			$this->$name = $value;
		}

		public function get($name)//gets property named $name
		{
			return $this->$name;
		}

		public function setFromBrowser()//sets properties from superglobals $_FILES & $_POST
		{
			
			if(isset($_FILES['datafile']) && $_FILES['datafile']['size'] > 0)//datafile is the html file input field's identifier
			{
				$this->Nombre = $_FILES['datafile']['name'];
				$this->tmpNombre = $_FILES['datafile']['tmp_name'];
				$this->Tamanio = $_FILES['datafile']['size'];
				$this->Tipo = $_FILES['datafile']['type'];
				$this->fp = fopen($this->tmpNombre,'r');
				$this->Contenido = fread($this->fp,filesize($this->tmpNombre));
				$this->Contenido = addslashes($this->Contenido);
				fclose($this->fp);
			}
			elseif(isset($_POST['Nombre']))
				$this->Nombre = $_POST['Nombre'];

			if(!get_magic_quotes_gpc())
				$this->Nombre = addslashes($this->Nombre);

			if(isset($_POST['Trabajador']))
				$this->Trabajador = $_POST['Trabajador'];

			if(isset($_POST['Empresa']))
				$this->Empresa = $_POST['Empresa'];

		}

		public function _import()
		{
			$ext = substr($this->Nombre,strlen($this->Nombre) - 3);

			if(isset($this->Contenido) && $ext == 'csv')
			{
				$txt = '<table>';
				$rows = preg_split ('/\r\n|\n/m', $this->Contenido);
				$rows_len = count($rows);

				for($i=0; $i<$rows_len; $i++)
				{
					$rows[$i] = utf8_encode($rows[$i]);
					$rows[$i] = '<tr><td>' . $rows[$i];
					$rows[$i] = str_replace ('\\"' , '', $rows[$i]);
					$rows[$i] = str_replace (';' , '</td><td>', $rows[$i]);
					$rows[$i] .= '</td></tr>';
					$txt .= $rows[$i];
				}

				$txt .= '</table>';
			}
			elseif($ext != 'csv')
				$txt = "El archivo debe tener la extención csv";

			return $txt;
		}

		public function _import_()
		{
			$ext = substr($this->Nombre,strlen($this->Nombre) - 3);

			if(isset($this->Contenido) && $ext == 'csv')
			{
				$rows = preg_split ('/\r\n|\n/m', $this->Contenido);
				$rows_len = count($rows);
				$somethings_missing = false;

				if(preg_match('/Solicitud de empleo/', $rows[0]) == 0)
				{

					//file check
					for($i=0; $i<$rows_len - 1; $i++)//rows_len -1 'cause the last line ends with \n
					{
						$rows[$i] = utf8_encode($rows[$i]);
						$rows[$i] = str_replace ('\\"' , '', $rows[$i]);
						$cols = preg_split ('/;/', $rows[$i]);
						$cols_len = count($cols);

						if($i == 0)//checking headers
						{

							for($j=0; $j<$cols_len; $j++)

								if($j == 0 && $cols[$j] != 'Nombre')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Nombre';
									break 2;
								}
								elseif($j == 1 && $cols[$j] != 'RFC')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: RFC';
									break 2;
								}
								elseif($j == 2 && $cols[$j] != 'CURP')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: CURP';
									break 2;
								}
								elseif($j == 3 && $cols[$j] != 'NSS')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: NSS';
									break 2;
								}
								elseif($j == 4 && $cols[$j] != 'Fecha de ingreso')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Fecha de ingreso';
									break 2;
								}
								elseif($j == 5 && $cols[$j] != 'Servicio')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Servicio';
									break 2;
								}
								elseif($j == 6 && $cols[$j] != 'Tipo')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Tipo';
									break 2;
								}
								elseif($j == 7 && $cols[$j] != 'Base')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Base';
									break 2;
								}
								elseif($j == 8 && $cols[$j] != 'Salario')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Salario';
									break 2;
								}
								elseif($j == 9 && $cols[$j] != 'Jornada')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Jornada';
									break 2;
								}
								elseif($j == 10 && $cols[$j] != 'Sucursal')
								{
									$somethings_missing = true;
									$msg = 'El encabezado de la columna ' . ($j + 1) . ' debe ser: Sucursal';
									break 2;
								}

						}
						else//i > 0
						{

							for($j=0; $j<$cols_len; $j++)

								if($cols[$j] == '' && $j != 3 && $j != 7 && $j != 8 && $j != 9)//"NSS", "Base", "Salario" and "Jornada" are optional
								{
									$somethings_missing = true;
									$msg = 'La columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta vacía';
									break 2;
								}
								elseif($j == 1 && preg_match('/[A-Z0-9]{3,4}[0-9]{6}[A-Z0-9]{3,5}/', $cols[$j]) == 0)//checking RFC sintax
								{
									$somethings_missing = true;
									$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta mal escrito el RFC, (3 o 4 caracteres alfanuméricos)(6 numeros)(3 a 5 caracteres alfanuméricos)';
									break 2;
								}
								elseif($j == 4 && preg_match('/\d{4}-\d{2}-\d{2}/', $cols[$j]) == 0)//checking date sintax
								{
									$somethings_missing = true;
									$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta mal escrita la fecha, el formato debe ser Año(4 dígitos)-Mes(2 dígitos)-Dia(2 dígitos)';
									break 2;
								}
								elseif($j == 5 && (preg_match('/\d+/', $cols[$j]) == 0 || preg_match('/\D/', $cols[$j]) != 0))//checking "Servicio" sintax
								{
									$somethings_missing = true;
									$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta mal escrito el servicio';
									break 2;
								}
								elseif($j == 6 && preg_match('/Asalariado|Asimilable/i', $cols[$j]) == 0)//checking "Tipo" sintax
								{
									$somethings_missing = true;
									$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta mal escrito el tipo, debe ser Asalariado o Asimilable';
									break 2;
								}
								elseif($j == 7 && preg_match('/Asalariado/', $cols[6]) != 0 && preg_match('/Salario diario|Salario mínimo/', $cols[$j]) == 0)//checking "Base" sintax
								{
									$somethings_missing = true;
									$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' esta mal escrita la base para el cálculo del sueldo, debe ser Salario diario o Salario mínimo';
									break 2;
								}
								elseif($j == 8 && ((preg_match('/Salario diario/i', $cols[7]) != 0 && preg_match('/\d+\.\d{2}/', $cols[$j]) == 0) || (preg_match('/Salario mínimo/i', $cols[7]) != 0 && (preg_match('/\d+/', $cols[$j]) == 0 || preg_match('/\./', $cols[$j]) != 0))))//checking "Salario" sintax
								{
									$somethings_missing = true;

									if(preg_match('/Salario diario/i', $cols[7]) != 0)
										$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' el salario diario esta mal escrito, debe ser por ejemplo 145.00';
									else
										$msg = 'En la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . ' el salario mínimo esta mal escrito, debe escribir su código asociado, por ejemplo 24';

									break 2;
								}
								elseif($j == 9 && ((preg_match('/Asalariado/i', $cols[6]) != 0 && ($cols[9] == '' || preg_match('/\d+/', $cols[9]) == 0)) || (preg_match('/Asimilable/i', $cols[6]) != 0 && $cols[$j] != '')))//checking "Jornada" sintax
								{
									$somethings_missing = true;
									$msg = 'La jornada en la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . " está mal escrita";
									break 2;
								}
								elseif($j == 10)//checking "Sucursal"
								{
									$result = $this->conn->query("SELECT Sucursal.Nombre FROM Sucursal LEFT JOIN Servicio ON Sucursal.Empresa = Servicio.Empresa WHERE Servicio.id = '{$cols[5]}' AND Sucursal.Nombre LIKE BINARY '{$cols[10]}' AND Sucursal.Cuenta = '{$_SESSION['cuenta']}' AND Servicio.Cuenta = '{$_SESSION['cuenta']}'");

									if($this->conn->num_rows($result) == 0)
									{
										$somethings_missing = true;
										$msg = 'La sucursal en la columna ' . ($j + 1) . ' de la fila ' . ($i + 1) . " no esta relacionada al servicio asignado, también revise los espacios y las mayúsculas";
										break 2;
									}

								}
								else//checking if "Trabajador" is already at db
								{
									$rfc = str_replace(' ' , '', $cols[1]);//deleting spaces
									$result = $this->conn->query("SELECT RFC FROM Trabajador WHERE RFC = '$rfc' AND Cuenta = '{$_SESSION['cuenta']}'");

									if($this->conn->num_rows($result) > 0)
									{
										$somethings_missing = true;
										$msg = $cols[0] . ' actualmente se encuentra en la base de datos';
										break 2;
									}

								}

						}

					}

					if(! $somethings_missing)
					{

						for($i=1; $i<$rows_len - 1; $i++)//rows_len -1 'cause the last line ends with \n
						{
							$cols = preg_split ('/;/', $rows[$i]);
							//storing "Trabajador"
							$trabajador = new Trabajador();
							$trabajador->set('Nombre',$cols[0]);
							$rfc = str_replace (' ' , '', $cols[1]);//deleting spaces
							$trabajador->set('RFC',$rfc);
							$curp = str_replace (' ' , '', $cols[2]);//deleting spaces
							$curp = strtoupper($curp);//capital letters
							$trabajador->set('CURP',$curp);
							$nss = str_replace (' ' , '', $cols[3]);//deleting spaces
							$trabajador->set('Numero_IMSS',$nss);

							if(isset($cols[9]))
							{
								$jornada = str_replace (' ' , '', $cols[9]);//deleting spaces
								$trabajador->set('Jornada',$jornada);
							}

							$trabajador->dbStore('false');
							//storing "Servicio_Trabajador"
							$servicio_trabajador = new Servicio_Trabajador();
							$servicio = str_replace (' ' , '', $cols[5]);//deleting spaces
							$servicio_trabajador->set('Servicio',$servicio);
							$servicio_trabajador->set('Trabajador',$rfc);
							$fecha_de_ingreso = str_replace (' ' , '', $cols[4]);//deleting spaces
							$servicio_trabajador->set('Fecha_de_ingreso',$fecha_de_ingreso);
							$servicio_trabajador->dbStore('false');
							//storing "Tipo"
							$tipo = new Tipo();
							$matches = array();
							preg_match('/Asalariado|Asimilable/i', $cols[6], $matches);//filtering any other character
							$_tipo = strtolower($matches[0]);//make the string lower case
							$_tipo = ucfirst($_tipo);//upper case fist character for first match
							$tipo->set('Tipo',$_tipo);
							$tipo->set('Trabajador',$rfc);
							$tipo->set('Fecha',$fecha_de_ingreso);
							$tipo->set('Servicio',$servicio);
							$tipo->dbStore('false');

							//storing "Base"
							if($_tipo == 'Asalariado')
							{
								$base = new Base();
								$matches = array();
								preg_match('/Salario diario|Salario mínimo/', $cols[7], $matches);//filtering any other character
								$_base = $matches[0];
								$base->set('Base',$_base);
								$base->set('Fecha',$fecha_de_ingreso);
								$base->set('Trabajador',$rfc);
								$base->set('Servicio',$servicio);
								$base->dbStore('false');
							}

							//storing "Salario"
							if($_tipo == 'Asalariado')
							{

								if($_base == 'Salario diario')
								{
									$salario = new Salario_diario();
									$salario->set('Cantidad',$cols[8]);
									$salario->set('Fecha',$fecha_de_ingreso);
									$salario->set('Trabajador',$rfc);
									$salario->set('Servicio',$servicio);
								}
								else
								{
									$salario = new Trabajador_Salario_minimo();
									$salario->set('Salario_minimo',$cols[8]);
									$salario->set('Fecha',$fecha_de_ingreso);
									$salario->set('Trabajador',$rfc);
									$salario->set('Servicio',$servicio);
								}

								$salario->dbStore('false');
							}

							if(count($cols) > 10)
							{
								//storing "Sucursal"
								$result = $this->conn->query("SELECT Sucursal.Empresa FROM Sucursal LEFT JOIN Servicio ON Sucursal.Empresa = Servicio.Empresa WHERE Servicio.id = '{$cols[5]}' AND Sucursal.Nombre LIKE BINARY '{$cols[10]}' AND Sucursal.Cuenta = '{$_SESSION['cuenta']}' AND Servicio.Cuenta = '{$_SESSION['cuenta']}'");
								list($empresa) = $this->conn->fetchRow($result);
								$sucursal = new Trabajador_Sucursal();
								$sucursal->set('Nombre',$cols[10]);
								$sucursal->set('Empresa',$empresa);
								$sucursal->set('Fecha_de_ingreso',$fecha_de_ingreso);
								$sucursal->set('Trabajador',$rfc);
								$sucursal->set('Servicio',$servicio);
								$sucursal->dbStore('false');
							}

						}

						if($rows_len == 1)
							$msg = '1 Trabajador importado';
						else
							$msg = ($rows_len - 2) . ' Trabajadores importados';//rows_len - 2 (title row and last \n)

					}

				}
				else//Solicitud de empleo
				{

					//file check
					for($i=0; $i<$rows_len - 1; $i++)//rows_len -1 'cause the last line ends with \n
					{
						$rows[$i] = utf8_encode($rows[$i]);
						$rows[$i] = str_replace ('\\"' , '', $rows[$i]);
						$cols = preg_split ('/;/', $rows[$i]);
						$cols_len = count($cols);

						if($i == 4)//checking "Puesto"
						{

							if($cols[0] == '')
							{
								$somethings_missing = true;
								$msg = 'El puesto es necesario';
								break;
							}
							else
								$_puesto = $cols[0];

						}
						elseif($i == 8)//checking "Fecha de contratación"
						{

							if($cols[29] == '' || preg_match('/\d{4}-\d{2}-\d{2}/', $cols[29]) == 0)
							{
								$somethings_missing = true;
								$msg = 'La fecha de contratación está mal escrita, debe ser Año(4 dígitos)-Mes(2 dígitos)-Día(2 dígitos)';
								break;
							}
							else
								$fecha_de_contratacion = str_replace (' ' , '', $cols[29]);//deleting spaces

						}
						elseif($i == 12)
						{

							if($cols[0] == '')//checking "Apellido paterno"
							{
								$somethings_missing = true;
								$msg = 'El apellido paterno es necesario';
								break;
							}
							else
								$apellido_paterno = $cols[0];

							if($cols[8] == '')//checking "Apellido materno"
							{
								$somethings_missing = true;
								$msg = 'El apellido materno es necesario';
								break;
							}
							else
								$apellido_materno = $cols[8];

							if($cols[16] == '')//checking Nombre
							{
								$somethings_missing = true;
								$msg = 'El nombre es necesario';
								break;
							}
							else
								$nombre = $cols[16];

							if($cols[29] == '')//checking "Edad"
							{
								$somethings_missing = true;
								$msg = 'La edad es nacesaria';
								break;
							}
							else
								$edad = $cols[29];

						}
						elseif($i == 14)
						{

							if($cols[0] == '')//checking "Domicilio"
							{
								$somethings_missing = true;
								$msg = 'El domicilio es necesario';
								break;
							}
							else
								$domicilio = $cols[0];

							if($cols[9] == '')//checking "Colonia"
							{
								$somethings_missing = true;
								$msg = 'La colonia es necesaria';
								break;
							}
							else
								$colonia = $cols[9];

							if($cols[29] == '' && $cols[33] == '')//checking "Sexo"
							{
								$somethings_missing = true;
								$msg = 'Indique un sexo';
								break;
							}
							elseif($cols[29] != '')
								$sexo = 'M';
							else
								$sexo = 'F';

						}
						elseif($i == 16)
						{

							if($cols[0] == '')//checking "Delegación o Municipio"
							{
								$somethings_missing = true;
								$msg = 'La delegación o municipio son necesarios';
								break;
							}
							else
								$delegacion_o_municipio = $cols[0];

							if($cols[12] == '')//checking "Lugar de nacimiento"
							{
								$somethings_missing = true;
								$msg = 'El lugar de nacimiento es necesario';
								break;
							}
							else
								$lugar_de_nacimiento = $cols[12];

							if($cols[21] == '' || preg_match('/\d{4}-\d{2}-\d{2}/', $cols[21]) == 0)//checking "Fecha de nacimiento"
							{
								$somethings_missing = true;
								$msg = 'La fecha de nacimiento está mal escrita, debe ser Año(4 dígitos)-Mes(2 dígitos)-Día(2 dígitos)';
								break;
							}
							else
								$fecha_de_nacimiento = str_replace (' ' , '', $cols[21]);//deleting spaces

							if($cols[29] == '')//checking "Nacionalidad"
							{
								$somethings_missing = true;
								$msg = 'La nacionalidad es necesaria';
								break;
							}
							else
								$nacionalidad = $cols[29];

						}
						elseif($i == 20)//checking "Estado civil"
						{

							if($cols[21] == '' && $cols[27] == '' && $cols[32] == '')
							{
								$somethings_missing = true;
								$msg = 'Indique un estado civil';
								break;
							}
							elseif($cols[21] != '')
								$estado_civil = 'Soltero';
							elseif($cols[27] != '')
								$estado_civil = 'Casado';
							else
								$estado_civil = 'Otro';

						}
						elseif($i == 24)//"CURP"
						{
							$curp = '';

							for($j=0; $j<20; $j++)
								$curp .= $cols[$j];

						}
						elseif($i == 27)
						{

							if(preg_match('/[A-Z0-9]{3,4}[0-9]{6}[A-Z0-9]{3,5}/', $cols[0]) == 0)//checking "RFC"
							{
								$somethings_missing = true;
								$msg = 'El RFC está mal escrito';
								break;
							}
							else
								$rfc = str_replace (' ' , '', $cols[0]);//deleting spaces;

							$numero_imss = $cols[11];
						}

					}

					if(! $somethings_missing)
					{
						$result = $this->conn->query("SELECT RFC FROM Trabajador WHERE RFC = '$rfc' AND Cuenta = '{$_SESSION['cuenta']}'");

						if($this->conn->num_rows($result) == 0)
						{
							//storing trabajador
							$trabajador = new Trabajador();
							$trabajador->set('Nombre',$apellido_paterno . ' ' . $apellido_materno . ' ' . $nombre);
							$trabajador->set('Domicilio_particular',$domicilio . ' ' . $colonia . ' ' . $delegacion_o_municipio . ' ' . $lugar_de_nacimiento);
							$trabajador->set('Nacionalidad',$nacionalidad);
							$trabajador->set('Estado_civil',$estado_civil);
							$trabajador->set('Fecha_de_nacimiento',$fecha_de_nacimiento);
							$trabajador->set('Lugar_de_nacimiento',$lugar_de_nacimiento);
							$trabajador->set('Sexo',$sexo);
							$trabajador->set('CURP',$curp);
							$trabajador->set('Edad',$edad);
							$trabajador->set('RFC',$rfc);
							$trabajador->set('Numero_IMSS',$numero_imss);
							$trabajador->set('Fecha_de_alta_IMSS',$fecha_de_contratacion);
							$trabajador->set('Jornada',8);
							$trabajador->dbStore('false');
							//storing tipo
							$tipo = new Tipo();
							$tipo->set('Tipo','Asalariado');
							$tipo->set('Fecha',$fecha_de_contratacion);
							$tipo->set('Trabajador',$rfc);
							$tipo->dbStore('false');
							//storing puesto
							$contrato = new Contrato();
							$contrato->set('Puesto',$_puesto);
							$contrato->set('Fecha',$fecha_de_contratacion);
							$contrato->set('Trabajador',$rfc);
							$contrato->dbStore('false');
							$msg = 'Trabajador importado';
						}
						else
							$msg = 'El trabajador actualmente se encuentra en la base de datos';

					}

				}

			}
			elseif($ext != 'csv')
				$msg = "El archivo debe tener la extención csv";

			return $msg;
		}

		public function showProperties()//prints properties values
		{

			foreach($this as $key => $value)

				if($key != 'conn' && $key != 'Contenido')
					echo "$key = $value <br />";

		}

		public function setFromDb()//sets properties from data base, but $Nombre has to be set before
		{
			$result = $this->conn->query("SELECT * FROM Archivo_digital WHERE Nombre = '{$this->Nombre}' AND Cuenta = '{$_SESSION['cuenta']}'");

			while($row = $this->conn->fetchRow($result,'ASSOC'))

				foreach($row as $key => $value)

					if($key != 'Cuenta')
						$this->$key = $value;

		}

		public function dbStore($update)//if $update is false it stores a new database register with $this' properties if $update is true it updates all database registers (professedly one) with $this' Nombre
		{

			if(isset($this->Nombre))
			{
				$actividad = new Actividad();
				$actividad->set('Dato','Archivo digital');
				$result = $this->conn->query("SELECT Nombre FROM Trabajador WHERE RFC = '{$this->Trabajador}' AND Cuenta = '{$_SESSION['cuenta']}'");
				list($trabajador) = $this->conn->fetchRow($result);
				$result = $this->conn->query("SELECT Nombre FROM Empresa WHERE RFC = '{$this->Empresa}' AND Cuenta = '{$_SESSION['cuenta']}'");
				list($empresa) = $this->conn->fetchRow($result);
				$this->conn->freeResult($result);
				$actividad->set('Identificadores',"Nombre: {$this->Nombre} " . ($trabajador != '' ?"Trabajador: $trabajador" : "Empresa: $empresa"));

				if($update == 'false')
				{
					$result = $this->conn->query("SELECT Nombre FROM Archivo_digital WHERE Cuenta = '{$_SESSION['cuenta']}'");

					while($row = $this->conn->fetchRow($result, 'ASSOC'))

						foreach($row as $key => $value)

							if($value == $this->Nombre)
								return 'Nombre de archivo repetido';

					$this->conn->query("INSERT INTO Archivo_digital (Nombre, Cuenta) VALUES ('{$this->Nombre}', '{$_SESSION['cuenta']}')");
					$actividad->set('Operacion','Nuevo');
					$actividad->dbStore();
				}

				foreach($this as $key => $value)

					if(isset($this->$key))
					{

						if($key != 'conn' && $key != 'Nombre' && $key != 'tmpNombre' && $key != 'fp' && $key != 'id')
							$status = $this->conn->query("UPDATE Archivo_digital SET $key  = '$value' WHERE Nombre = '{$this->Nombre}' AND Cuenta = '{$_SESSION['cuenta']}'");

					}
					elseif($key == 'Trabajador' || $key == 'Empresa')
							$this->conn->query("UPDATE Archivo_digital SET $key = NULL WHERE Nombre = '{$this->Nombre}' AND Cuenta = '{$_SESSION['cuenta']}'");

				return 'Listo';
			}

			return 'Error';
		}

		public function dbDelete()//delete this entity from database but Nombre has to be set before
		{

			if(isset($this->Nombre))
			{
				$this->setFromDb();
				$actividad = new Actividad();
				$actividad->set('Operacion','Eliminar');
				$actividad->set('Dato','Archivo digital');
				$result = $this->conn->query("SELECT Nombre FROM Trabajador WHERE RFC = '{$this->Trabajador}' AND Cuenta = '{$_SESSION['cuenta']}'");
				list($trabajador) = $this->conn->fetchRow($result);
				$result = $this->conn->query("SELECT Nombre FROM Empresa WHERE RFC = '{$this->Empresa}' AND Cuenta = '{$_SESSION['cuenta']}'");
				list($empresa) = $this->conn->fetchRow($result);
				$this->conn->freeResult($result);
				$actividad->set('Identificadores',"Nombre: {$this->Nombre} " . ($trabajador != '' ?"Trabajador: $trabajador" : "Empresa: $empresa"));
				$actividad->dbStore();
				$this->conn->query("DELETE FROM Archivo_digital WHERE Nombre = '{$this->Nombre}'");
			}

		}

		public function draw($act,$iframe = 0)//draws $this Archivo digital. if $act == 'ADD' or $act == 'EDIT' the fields can be edited and the form is submitted to store_archivo_digital.php. if $act == 'DRAW' the fields can't be edited and the form is not submitted, $iframe is the name the iframe is gonna have
		{
			echo "<div onclick = \"show('Datos_fieldset',this)\" class = \"datos_tab\">Datos</div>";

			if($act == 'ADD')
				$action = 'action = "store_archivo_digital.php?update=false"';
			elseif($act == 'IMPORT')
				$action = 'action = "store_archivo_digital.php?update=import"';
			elseif($act == '_IMPORT')
				$action = 'action = "store_archivo_digital.php?update=_import"';

			if($act == 'ADD' || $act == 'IMPORT' || $act == '_IMPORT')
				echo "<form enctype = \"multipart/form-data\" $action method = \"post\" target = \"$iframe\" class = \"show_form\" onsubmit = \"return form_val(this)\">";
			else
				echo "<form class = \"show_form\">";

				echo "<fieldset class = \"Datos_fieldset\" style = \"visibility:visible\"\>";
					echo "<textarea class = \"hidden_textarea\" name = \"iframe\" readonly=true>$iframe</textarea>";
					echo "<textarea class = \"hidden_textarea\" name = \"Trabajador\" readonly=true>{$this->Trabajador}</textarea>";
					echo "<textarea class = \"hidden_textarea\" name = \"Empresa\" readonly=true>{$this->Empresa}</textarea>";

					echo "<label class = \"archivo_label\">Archivo</label>";

					if ($act == 'ADD' || $act == 'IMPORT' || $act == '_IMPORT')
					{
						echo "<input type = \"file\" class = \"file_input\" name = \"datafile\" id = \"datafile\" title = \"Archivo\" value = \"{$this->Nombre}\" onchange = \"copy_file_name(this)\"/>";
						echo "<textarea class = \"datafile_aux_textarea\"></textarea>";
						echo "<img class = 'aux_button'\>";
					}
					elseif($act == 'DRAW' || $act == 'EDIT')
					{
						echo "<textarea class = \"archivo_textarea\" name = \"Nombre\" title = \"Nombre\" readonly=true>$this->Nombre</textarea>";
						echo "<input type=\"button\" value = \"▼\" class=\"download_button\" onmouseover = \"download_button_bright(this)\" onmouseout = \"download_button_opaque(this)\" onclick=\"open_file('$this->Nombre')\">";//function open_file() at archivo_digital.js
					}

				echo "</fieldset>";

			if($act == 'ADD' || $act == 'IMPORT' || $act == '_IMPORT')
				echo '<input type = "submit" title = "Guardar" class = "submit_button" value = "ok" id = "submit_button" />';
			else
				echo "<img title = \"Guardar\"class = \"submit_button\" onclick = \"_submit('$act',this.parentNode,'Archivo_digital')\" />";//_submit() at common_entities.js
			
			echo "</form>";
			echo "<iframe id=\"$iframe\" name=\"$iframe\" src=\"#\" style=\"visibility:hidden\"></iframe>";

		}

	}

?>
